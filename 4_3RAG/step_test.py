#!/usr/bin/env python3
"""
Step-by-step RAG system test
"""

def test_step_by_step():
    print("üîß STEP-BY-STEP RAG SYSTEM VERIFICATION")
    print("=" * 50)
    
    # Step 1: Basic imports
    print("\n1Ô∏è‚É£ Testing basic imports...")
    try:
        import logging
        import warnings
        import os
        print("   ‚úÖ Basic Python modules imported")
    except Exception as e:
        print(f"   ‚ùå Basic imports failed: {e}")
        return False
    
    # Step 2: NumPy and basic ML
    print("\n2Ô∏è‚É£ Testing NumPy...")
    try:
        import numpy as np
        test_array = np.array([1, 2, 3])
        print(f"   ‚úÖ NumPy working (test array: {test_array})")
    except Exception as e:
        print(f"   ‚ùå NumPy failed: {e}")
        return False
    
    # Step 3: PyTorch
    print("\n3Ô∏è‚É£ Testing PyTorch...")
    try:
        import torch
        print(f"   ‚úÖ PyTorch {torch.__version__} imported")
    except Exception as e:
        print(f"   ‚ùå PyTorch failed: {e}")
        return False
    
    # Step 4: Transformers
    print("\n4Ô∏è‚É£ Testing Transformers...")
    try:
        import transformers
        print(f"   ‚úÖ Transformers {transformers.__version__} imported")
    except Exception as e:
        print(f"   ‚ùå Transformers failed: {e}")
        return False
    
    # Step 5: Sentence Transformers
    print("\n5Ô∏è‚É£ Testing Sentence Transformers...")
    try:
        from sentence_transformers import SentenceTransformer
        print("   ‚úÖ Sentence Transformers imported")
    except Exception as e:
        print(f"   ‚ùå Sentence Transformers failed: {e}")
        return False
    
    # Step 6: FAISS
    print("\n6Ô∏è‚É£ Testing FAISS...")
    try:
        import faiss
        print(f"   ‚úÖ FAISS imported")
    except Exception as e:
        print(f"   ‚ùå FAISS failed: {e}")
        return False
    
    # Step 7: LangChain
    print("\n7Ô∏è‚É£ Testing LangChain...")
    try:
        from langchain.text_splitter import RecursiveCharacterTextSplitter
        print("   ‚úÖ LangChain text splitter imported")
    except Exception as e:
        print(f"   ‚ùå LangChain failed: {e}")
        return False
    
    # Step 8: Document loading
    print("\n8Ô∏è‚É£ Testing document loading...")
    try:
        with open('Selected_Document.txt', 'r', encoding='utf-8') as f:
            text = f.read()
        print(f"   ‚úÖ Document loaded ({len(text)} characters)")
        if len(text) < 100:
            print("   ‚ö†Ô∏è  Document seems too short")
    except Exception as e:
        print(f"   ‚ùå Document loading failed: {e}")
        return False
    
    # Step 9: Text splitting
    print("\n9Ô∏è‚É£ Testing text splitting...")
    try:
        splitter = RecursiveCharacterTextSplitter(
            separators=['\n\n', '\n', ' ', ''],
            chunk_size=500,
            chunk_overlap=50
        )
        chunks = splitter.split_text(text)
        print(f"   ‚úÖ Text split into {len(chunks)} chunks")
        if len(chunks) > 0:
            print(f"   üìù First chunk preview: {chunks[0][:100]}...")
    except Exception as e:
        print(f"   ‚ùå Text splitting failed: {e}")
        return False
    
    # Step 10: Model loading (this might take time)
    print("\nüîü Testing model loading (this may take a while)...")
    try:
        # Use a very simple model for testing
        from transformers import pipeline
        print("   ‚è≥ Loading FLAN-T5-small...")
        generator = pipeline('text2text-generation', model='google/flan-t5-small', device=-1)
        
        # Quick test
        test_result = generator("Question: What is 2+2? Answer:", max_length=20)
        print(f"   ‚úÖ Generation model loaded and tested")
        print(f"   ü§ñ Test output: {test_result[0]['generated_text']}")
    except Exception as e:
        print(f"   ‚ùå Model loading failed: {e}")
        print("   üí° This might be due to network issues or insufficient disk space")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ ALL STEPS COMPLETED SUCCESSFULLY!")
    print("Your RAG system should be fully functional.")
    print("\nüöÄ Next steps:")
    print("   ‚Ä¢ Run: python RAG_app.py")
    print("   ‚Ä¢ Ask questions about artificial intelligence")
    print("   ‚Ä¢ Test with queries like 'What is machine learning?'")
    
    return True

if __name__ == "__main__":
    success = test_step_by_step()
    if not success:
        print("\nüîß Some components need attention before the RAG system will work properly.")
